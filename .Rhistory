library(htmlwidgets)
htmlwidgets::scaffoldWidget("faq")
devtools::document()
devtools::install()
faq("hello, world")
library(faq)
jsdata = htmlwidgets:::toJSON('jsonData = {
question: ["Question1","Question2",
"Question3", "Question4"],
answer: ["Lorem ipsum dolor sit amet,
consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat.",
"dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat", "answer3", "Answer4??"]}')
faq()
library(faq)
faq(data = jsdata)
faq()
faq(data = jsdata)
faq(data = jsdata, elementId = "faq")
library(faq)
jsdata = htmlwidgets:::toJSON('jsonData = {
question: ["Question1","Question2",
"Question3", "Question4"],
answer: ["Lorem ipsum dolor sit amet,
consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat.",
"dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat", "answer3", "Answer4??"]}')
faq(data = jsdata, elementId = "faq")
library(faq)
jsdata = htmlwidgets:::toJSON('jsonData = {
question: ["Question1","Question2",
"Question3", "Question4"],
answer: ["Lorem ipsum dolor sit amet,
consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat.",
"dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat", "answer3", "Answer4??"]}')
faq(data = jsdata, elementId = "faq")
library(faq)
faq(data = jsdata, elementId = "faq")
htmlwidgets:::toJSON('jsonData = {
question: ["Question1","Question2",
"Question3", "Question4"],
answer: ["Lorem ipsum dolor sit amet,
consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat.",
"dolor sit amet, consectetur adipisicing elit,
sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco
laboris nisi ut aliquip ex ea commodo consequat", "answer3", "Answer4??"]}')
htmlwidgets:::toJSON(iris[1:2,])
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("Lorem ipsum dolor sit amet", "consectetur adipisicing elit, sed do eiusmod.", "answer3")
)
htmlwidgets::toJSON(df)
rjson::toJSON(df)
class(rjson::toJSON(df) )
HTMLWidgets.dataframeToD3(df)
htmlwidgets:::toJSON(df)
library(faq)
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("Lorem ipsum dolor sit amet", "consectetur adipisicing elit, sed do eiusmod.", "answer3")
)
faq(data = df, elementId = "faq")
df
library(faq)
faq(data = df, elementId = "faq")
library(faq)
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("Lorem ipsum dolor sit amet",
"consectetur adipisicing elit, sed do eiusmod.",
"answer3")
)
faq(data = df, elementId = "faq")
faq(data = df, elementId = "faq", title = "FAQ")
faq(data = df, elementId = "faq")
library(faq)
devtools::document()
library(faq)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
faqOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderFaq({
faq(data = df, elementId = "faq")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
faqOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderFaq({
faq(data = df, elementId = "faq")
})
}
shinyApp(ui = ui, server = server)
library(faq)
library(faq)
library(faq)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
faqOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
output$distPlot <- renderFaq({
faq(data = df, elementId = "faq", width = "80%")
})
}
shinyApp(ui = ui, server = server)
library(faq)
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("Lorem ipsum dolor sit amet",
"consectetur adipisicing elit, sed do eiusmod.",
"answer3")
)
faq(data = df, elementId = "faq")
library(devtools)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("answer for question1",
"question2 answer",
"answer3")
)
faq(data = df, elementId = "faq")
df <- data.frame(
question = c("Question1", "Question2", "Question3"),
answer = c("answer for question1",
"question2 answer",
"answer3")
)
faq(data = df, elementId = "faq", title = "Frequently Asked Questions")
faq(data = df, elementId = "faq")
usethis::use_readme_rmd()
